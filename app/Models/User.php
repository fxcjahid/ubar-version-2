<?php

/**
 * Summary of namespace App\Models\User
 * @author Fxc Jahid <fxcjahid3@gmail.com>
 */

namespace App\Models;

use App\Enums\UserType;
use Laravel\Sanctum\HasApiTokens;
use Spatie\Permission\Traits\HasRoles;
use Illuminate\Notifications\Notifiable;
use App\Http\Controllers\ReferralController;
use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Relations\HasOne;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;


class User extends Authenticatable
{
    use HasFactory, Notifiable, HasApiTokens, HasRoles;

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'unique_id',
        'username',
        'referral_code',
        'first_name',
        'last_name',
        'phone',
        'phone_verified_at',
        'email',
        'password',
        'user_type',
        'status',
    ];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * The attributes that should be cast to native types.
     *
     * @var array
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
        'phone_verified_at' => 'datetime',
        // 'user_type'         => UserType::class,
    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::creating(function ($user) {
            if (empty ($user->unique_id)) {
                $user->unique_id = rand(100000, 999999);
            }

            if (empty ($user->referral_code)) {
                $user->referral_code = self::createdReferralCode();
            }

            if (empty ($user->status)) {
                $user->status = 'active';
            }
        });
    }

    /**
     * get user full name
     * @return string
     */
    public function getNameAttribute()
    {
        return $this->first_name . ' ' . $this->last_name;
    }

    /**
     * Create Primary Unique Refer Code
     * @var int $referralCode
     */
    protected static function createdReferralCode()
    {
        return ReferralController::generateUniqueCode();
    }

    public function driverDoc() : HasOne
    {
        return $this->hasOne(DriverDoc::class, 'driver_id');
    }

    /**
     * Summary of driverInfo
     * @return \Illuminate\Database\Eloquent\Relations\HasOne
     */
    public function driverInfo() : HasOne
    {
        return $this->hasOne(DriverInfo::class, 'user_id');
    }

    /**
     * Summary of user info
     * @return \Illuminate\Database\Eloquent\Relations\HasOne
     */
    public function userInfo() : HasOne
    {
        return $this->hasOne(UserInfo::class, 'user_id');
    }

    /**
     * Summary of user car info     * @return \Illuminate\Database\Eloquent\Relations\HasOne
     */
    public function car() : HasOne
    {
        return $this->hasOne(Car::class, 'user_id');
    }

    /**
     * Summary of files
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function files()
    {
        return $this->hasMany(File::class, 'user_id');
    }

    /**
     * Summary of referrals
     * @author Fxc Jahid <fxcjahid3@gmail.com>
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function referrals()
    {
        return $this->hasMany(Referral::class, 'referral_code', 'referral_code')
            ->with(['referrer', 'referred']);
    }

    /**
     * Summary of get regular User
     * @return mixed
     */
    public function getUser()
    {
        return self::where('user_type', '=', 'USER')->get();
    }

    /**
     * Summary of get Driver List
     * @return mixed
     */
    public function getDriver()
    {
        return self::where('user_type', '=', 'DRIVER')->get();
    }
}